using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using Tobii.Gaming;



[System.Serializable]
public class AxleInfo
{
    public WheelCollider leftWheel;
    public WheelCollider rightWheel;
    public bool motor; //このホイールがエンジンにアタッチされているかどうか
    public bool steering; // このホイールがハンドルの角度を反映しているかどうか
}

public class CarMove : MonoBehaviour
{
    public List<AxleInfo> axleInfos; // 個々の車軸の情報
    Rigidbody rigid;
    public float motorTorque; //ホイールに適用可能な最大トルク
    public float maxSteeringAngle; // 適用可能な最大ハンドル角度
    public float brakeTorque;

    public WheelCollider wheelFL;
    public WheelCollider wheelFR;
    public WheelCollider wheelBL;
    public WheelCollider wheelBR;

    public Transform wheelFLTrans;
    public Transform wheelFRTrans;
    public Transform wheelBLTrans;
    public Transform wheelBRTrans;
    float steering = 0.0f;
    float motor = 0.0f;
    float Speed;
    float Speed2;



    private float position;
    private float position2;

    public Text x_text;
    public Text Speed_text;
    public Text Gia_text;
    public Text Speed2_text;
    public Text muki_text;

    private GazeAware gazeAware;

    public float[] GearRation=new float[6];
    public int CurrentGear =0;

    public float MaxEngineRPM = 6000;
    public float MinEngineRPM = 1000;
    public float EngineRPM = 0.0f;



    void Start()
    {
        rigid = GameObject.Find("Jon").GetComponent<Rigidbody>();
        rigid.centerOfMass +=new Vector3(0, -1,0);

        gazeAware = GetComponent<GazeAware>();//Tobiiの情報を取得
    }
    void Update()
    {



        if (Input.GetKey(KeyCode.Space))//サイドブレーキ
        {
            wheelFLTrans.Rotate(wheelFL.rpm / 60 * 360 * Time.deltaTime, 0, 0);
            wheelFRTrans.Rotate(wheelFR.rpm / 60 * 360 * Time.deltaTime, 0, 0);
            wheelBLTrans.Rotate(0, 0, 0);
            wheelBRTrans.Rotate(0, 0, 0);
        }


        else
        {


            //wheelcolliderの回転速度に合わせてタイヤモデルを回転させる
            wheelFLTrans.Rotate(wheelFL.rpm / 60 * 360 * Time.deltaTime, 0, 0);
            wheelFRTrans.Rotate(wheelFR.rpm / 60 * 360 * Time.deltaTime, 0, 0);
            wheelBLTrans.Rotate(wheelBL.rpm / 60 * 360 * Time.deltaTime, 0, 0);
            wheelBRTrans.Rotate(wheelBR.rpm / 60 * 360 * Time.deltaTime, 0, 0);

            //wheelcolliderの角度に合わせてタイヤモデルを回転する（フロントのみ）
            wheelFLTrans.localEulerAngles = new Vector3(wheelFLTrans.localEulerAngles.x, wheelFL.steerAngle - wheelFLTrans.localEulerAngles.z, wheelFLTrans.localEulerAngles.z);
            wheelFRTrans.localEulerAngles = new Vector3(wheelFRTrans.localEulerAngles.x, wheelFR.steerAngle - wheelFRTrans.localEulerAngles.z, wheelFRTrans.localEulerAngles.z);
        }
    }

    public void FixedUpdate()
    {
        GazePoint gazePoint = TobiiAPI.GetGazePoint();//目線の座標を取得

        EngineRPM = (wheelBL.rpm + wheelBR.rpm) / 2 * GearRation[CurrentGear];
        SiftGears();


        position = gazePoint.Screen.x;

        Speed = rigid.velocity.magnitude;
        Speed2 = rigid.velocity.magnitude;


        if (Input.GetMouseButton(0))//アクセル（マウスの左クリック）
        {
            motor += motorTorque *Time.deltaTime / GearRation[CurrentGear];
            if (EngineRPM < 0) motor += motorTorque * Time.deltaTime / GearRation[CurrentGear]*2;
        }
        else if (Input.GetMouseButton(1))//ブレーキ（マウスの右クリック）
        {
            motor -= motorTorque*Time.deltaTime / GearRation[CurrentGear];
            if (EngineRPM < 0) motor +=motorTorque*Time.deltaTime/GearRation[CurrentGear];
        }
        else// 何もしてないとき
        {
            motor=0;
            if (EngineRPM < 0) motor += motorTorque * Time.deltaTime / GearRation[CurrentGear];
        }



        //目線の座標に応じてタイヤの角度を調整
        if (position < 100) position2 = (float)-1;
        else if (position < 200) position2 = (float)-0.7;
        else if (position < 300) position2 = (float)-0.4;
        else if (position < 400) position2 = (float)-0.2;
        else if (position < 500) position2 = (float)-0.1;
        else if (position < 600) position2 = (float)-0.05;
        else if (position < 850) position2 = (float)0;
        else if (position < 950) position2 = (float)0.05;
        else if (position < 1050) position2 = (float)0.3;
        else if (position < 1150) position2 = (float)0.5;
        else if (position < 1250) position2 = (float)0.8;
        else if (position < 1350) position2 = (float)1;
        steering = maxSteeringAngle * position2;


        foreach (AxleInfo axleInfo in axleInfos)
        {
            if (axleInfo.steering)
            {
                axleInfo.leftWheel.steerAngle = steering;
                axleInfo.rightWheel.steerAngle = steering;
            }
            if (axleInfo.motor)
            {
                axleInfo.leftWheel.motorTorque = motor;
                axleInfo.rightWheel.motorTorque = motor;
            }
        }

        if (Input.GetKey(KeyCode.Space))
        {
            foreach (AxleInfo axleInfo0 in axleInfos)
            {
                if (axleInfo0.motor)
                {
                    axleInfo0.leftWheel.motorTorque = motor;
                    axleInfo0.rightWheel.motorTorque = motor;
                }
            }

            foreach (AxleInfo axleInfo1 in axleInfos)
            {
                if (axleInfo1.motor)
                {
                    axleInfo1.leftWheel.motorTorque = 0;
                    axleInfo1.rightWheel.motorTorque = 0;
                }
            }
        }

        var direction = transform.forward;

    }
    public void UpdateMeshesPosition()//車体を倒れないようにする
    {
        Quaternion quat;
        Vector3 pos;
        wheelFL.GetWorldPose(out pos, out quat);
        wheelFR.GetWorldPose(out pos, out quat);
        wheelBL.GetWorldPose(out pos, out quat);
        wheelBR.GetWorldPose(out pos, out quat);

        wheelFLTrans.position = pos;
        wheelFRTrans.position = pos;
        wheelBLTrans.position = pos;
        wheelBRTrans.position = pos;

        wheelFLTrans.rotation = quat;
        wheelFRTrans.rotation = quat;
        wheelBLTrans.rotation = quat;
        wheelBRTrans.rotation = quat;


    }

   void SiftGears()
    {

        int AppropriateGear;
        if (EngineRPM >= MaxEngineRPM)
        {
            AppropriateGear=CurrentGear;

            for(int i=0; i<6; i++)
            {
                if (wheelBL.rpm * GearRation[i] < MaxEngineRPM)
                {
                    AppropriateGear = i;
                    break;
                }
            }

            CurrentGear = AppropriateGear;

        }

         if (EngineRPM <= MinEngineRPM)
        {
            AppropriateGear = CurrentGear;


            for(var j=5; j>=0; j--)
            {
                if (wheelBL.rpm * GearRation[j] > MinEngineRPM)
                {
                    AppropriateGear = j;
                    break;
                }
            }

            CurrentGear = AppropriateGear;
        }



    }

}
