using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using TMPro;
using UnityEngine.SceneManagement;



[System.Serializable]
public class AxleInfo
{
    public WheelCollider leftWheel;
    public WheelCollider rightWheel;
    public bool motor; //このホイールがエンジンにアタッチされているかどうか
    public bool steering; // このホイールがハンドルの角度を反映しているかどうか
}

public class CarMove : MonoBehaviour
{

    public readonly static CarMove Instance = new CarMove();//シーン間の情報共有


    public List<AxleInfo> axleInfos; // 個々の車軸の情報
    Rigidbody rigid;
    public Vector3 center = new Vector3(0f, -0.2f, 0f);
    public float motorTorque; //ホイールに適用可能な最大トルク
    public float maxSteeringAngle; // 適用可能な最大ハンドル角度

    public WheelCollider wheelFL;
    public WheelCollider wheelFR;
    public WheelCollider wheelBL;
    public WheelCollider wheelBR;

    public Transform wheelFLTrans;
    public Transform wheelFRTrans;
    public Transform wheelBLTrans;
    public Transform wheelBRTrans;
    float steering = 0.0f;
    public float motor = 0.0f;
    float Speed;
    float Speed2;
    string Gia;
    float Seconds = 0;
    float Timer = 0;
    public static float finishTime;
    int kai = 0;
    float saidbreak=0.0f;


    float countdown = 6f;
    int count;



    private float position;
    private float position2;

    public TextMeshProUGUI CountDown_text;
    public TextMeshProUGUI Timer_text;

    public float[] GearRation = new float[6];
    public int CurrentGear = 0;

    public float MaxEngineRPM = 3000.0f;
    public float MinEngineRPM = 1000.0f;
    public float EngineRPM = 0.0f;

    public Text Gear_Text;

    void Start()
    {
        rigid = GameObject.Find("Jon").GetComponent<Rigidbody>();
        rigid.centerOfMass = center;

        CountDown_text.text = count + "";
        Timer_text.text = Timer + "";
        Gear_Text.text = CurrentGear + "";

        wheelBL =GameObject.Find("SportCar20_WheelRearLeft").GetComponent<Collider>() as WheelCollider;
        wheelBR = GameObject.Find("SportCar20_WheelRearRight").GetComponent<Collider>() as WheelCollider;

        WheelFrictionCurve curve = new WheelFrictionCurve();

        curve.extremumSlip = 0.2f;

        curve.extremumValue = 1.0f;

        curve.asymptoteSlip = 0.5f;

        curve.asymptoteValue = 0.75f;

        curve.stiffness = 2.0f;

        wheelBL.sidewaysFriction = curve;
        wheelBR.sidewaysFriction = curve;

    }
    void Update()
    {
        if (Input.GetKey(KeyCode.Space))
        {
            wheelFLTrans.Rotate(wheelFL.rpm / 60 * 360 * Time.deltaTime, 0, 0);
            wheelFRTrans.Rotate(wheelFR.rpm / 60 * 360 * Time.deltaTime, 0, 0);
            wheelBLTrans.Rotate(0, 0, 0);
            wheelBRTrans.Rotate(0, 0, 0);
        }
        else
        {
            //wheelcolliderの回転速度に合わせてタイヤモデルを回転させる
            wheelFLTrans.Rotate(wheelFL.rpm / 60 * 360 * Time.deltaTime, 0, 0);
            wheelFRTrans.Rotate(wheelFR.rpm / 60 * 360 * Time.deltaTime, 0, 0);
            wheelBLTrans.Rotate(wheelBL.rpm / 60 * 360 * Time.deltaTime, 0, 0);
            wheelBRTrans.Rotate(wheelBR.rpm / 60 * 360 * Time.deltaTime, 0, 0);
        }

        //wheelcolliderの角度に合わせてタイヤモデルを回転する（フロントのみ）
        wheelFLTrans.localEulerAngles = new Vector3(wheelFLTrans.localEulerAngles.x, wheelFL.steerAngle - wheelFLTrans.localEulerAngles.z, wheelFLTrans.localEulerAngles.z);
        wheelFRTrans.localEulerAngles = new Vector3(wheelFRTrans.localEulerAngles.x, wheelFR.steerAngle - wheelFRTrans.localEulerAngles.z, wheelFRTrans.localEulerAngles.z);

    }

    public void FixedUpdate()
    {
        EngineRPM = (wheelFL.rpm + wheelFR.rpm) / 2 * GearRation[CurrentGear];
        ShiftGears();

        WheelFrictionCurve curve = new WheelFrictionCurve();

        curve.extremumSlip = 0.2f;

        curve.extremumValue = 1.0f;

        curve.asymptoteSlip = 0.5f;

        curve.asymptoteValue = 0.75f;

        curve.stiffness =2.0f;



        WheelFrictionCurve curve2 = new WheelFrictionCurve();

        curve2.extremumSlip = 0.2f;

        curve2.extremumValue = 1.0f;

        curve2.asymptoteSlip = 0.5f;

        curve2.asymptoteValue = 0.75f;

        curve2.stiffness = 0.8f;

        wheelBL.sidewaysFriction = curve;
        wheelBR.sidewaysFriction = curve;

        if (countdown >= 0)
        {
            countdown -= Time.deltaTime;
            count = (int)countdown;
            CountDown_text.text = count + "";
            if (count == 0) CountDown_text.text = "GO";
        }

        position = Input.mousePosition.x;
        Vector3 pos = transform.position;
        rigid.centerOfMass = center;

        Speed = rigid.velocity.magnitude;
        Speed2 = rigid.velocity.magnitude;

        if (countdown <= 0.5f)
        {
            Timer += Time.deltaTime;
            Timer = Timer * 100;
            Timer = Mathf.Floor(Timer) / 100;
            CountDown_text.gameObject.SetActive(false);





                motor = motorTorque / GearRation[CurrentGear]* Input.GetAxis("MouseLift");//ギア1
            if (Input.GetMouseButton(0))
            {
                if (EngineRPM < 0)
                {
                    motor = motorTorque  / GearRation[CurrentGear] * 10;
                }
            }
            else if (Input.GetMouseButton(1))
            {
                if (EngineRPM > 0)
                {
                    motor -= motorTorque  / GearRation[CurrentGear] * 10;
                }
            }
            else
            {
                motor = 0;
            }


 






                if (position < 100) position2 = (float)-1;
            else if (position < 200) position2 = (float)-0.7;
            else if (position < 300) position2 = (float)-0.4;
            else if (position < 400) position2 = (float)-0.2;
            else if (position < 500) position2 = (float)-0.1;
            else if (position < 600) position2 = (float)-0.05;
            else if (position < 850) position2 = (float)0;
            else if (position < 950) position2 = (float)0.05;
            else if (position < 1050) position2 = (float)0.3;
            else if (position < 1150) position2 = (float)0.5;
            else if (position < 1250) position2 = (float)0.8;
            else if (position < 1350) position2 = (float)1;
            steering = maxSteeringAngle * position2;


            float Handle = Input.GetAxis("Horizontal");
            this.transform.Rotate(Vector3.up, 20 * Handle * Time.deltaTime);

            foreach (AxleInfo axleInfo in axleInfos)
            {
                if (axleInfo.steering)
                {
                    axleInfo.leftWheel.steerAngle = steering;
                    axleInfo.rightWheel.steerAngle = steering;
                }
                if (axleInfo.motor)
                {
                    axleInfo.leftWheel.motorTorque = motor ;
                    axleInfo.rightWheel.motorTorque = motor;
                }
            }
        }
            if (Input.GetKey(KeyCode.Space))
            {
                rigid.centerOfMass = new Vector3(0, 0, 1f);
                wheelBL.sidewaysFriction = curve2;
                wheelBR.sidewaysFriction = curve2;
            }

        var direction = transform.forward;

        Timer_text.text = Timer + "";
        Gear_Text.text = CurrentGear + "";

        if (pos.x > -33 && pos.x < -28 && pos.z > -191 && pos.z < -188)
        {
            finishTime = Timer;
            SceneManager.LoadScene("result");
        }




    }
    void UpdateMeshesPosition()
    {
        Quaternion quat;
        Vector3 pos;
        wheelFL.GetWorldPose(out pos, out quat);
        wheelFR.GetWorldPose(out pos, out quat);
        wheelBL.GetWorldPose(out pos, out quat);
        wheelBR.GetWorldPose(out pos, out quat);

        wheelFLTrans.position = pos;
        wheelFRTrans.position = pos;
        wheelBLTrans.position = pos;
        wheelBRTrans.position = pos;

        wheelFLTrans.rotation = quat;
        wheelFRTrans.rotation = quat;
        wheelBLTrans.rotation = quat;
        wheelBRTrans.rotation = quat;


    }

    public void ShiftGears()
    {
        int AppropriateGear=0;
            if (EngineRPM >= MaxEngineRPM)
            {
                 AppropriateGear = CurrentGear;

            if (Input.GetKey(KeyCode.W))
            {
                AppropriateGear++;
            }

                CurrentGear = AppropriateGear;

            }

        if (EngineRPM <= MinEngineRPM)
        {
            AppropriateGear = CurrentGear;

            if (Input.GetKey(KeyCode.S))
            {
                AppropriateGear--;
            }
                            for (var j = 5; j >= 0; j--)
                            {
                                    if (wheelBL.rpm * GearRation[j] > MinEngineRPM*(CurrentGear+1)/2)
                                        {
                                            AppropriateGear = j;
                                            break;
                                        }
                             }

                CurrentGear = AppropriateGear;
            }



    }

    public float GetEngineRPM()
    {
        return EngineRPM;
    }


    public static float getFinishTime()
    {
        return finishTime;
    }

}


