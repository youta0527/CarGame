 var FrontLeftWheel : WheelCollider;
 var FrontRightWheel : WheelCollider;
 
 // これらの変数は歯車用であり、配列は比率のリストです。スクリプト
 // 定義されたギア比を使用して、ホイールに適用するトルクを決定します
    public float[] GearRation=new float[6];
    public int CurrentGear =0;
 
 // これらの変数は、ホイールとシフトギアにトルクを加えるためだけのものです。
 // 定義された最大および最小エンジンRPMを使用して、スクリプトはどのギアを決定できます
 //車が入っている必要があります
 private float motorTorque = 230.0;
 private float MaxEngineRPM = 3000.0;
 private float MinEngineRPM = 1000.0;
 private float EngineRPM = 0.0;
 
 
 
 void Start () {
     // 私は通常、車をより安定させるために重心を変更します。私はこのようにひっくり返す可能性が低いです。
 rigidbody.centerOfMass += Vector3(0, -1, .25);
     }
 
 void Update () {
     
         // 2つの車輪の平均RPMに基づいてエンジンRPMを計算し、シフトギア関数を呼び出します
     EngineRPM = (FrontLeftWheel.rpm + FrontRightWheel.rpm)/2 * GearRatio[CurrentGear];
     ShiftGears();
 
     // オーディオピッチをRPMのパーセンテージに最大RPMプラス1に設定すると、サウンドが再生されます
     //ピッチの最大2倍で、ギアを切り替えると突然下がります。
     audio.pitch = Mathf.Abs(EngineRPM / MaxEngineRPM) + 1.0 ;
     // this line is just to ensure that the pitch does not reach a value higher than is desired.
     if ( audio.pitch > 2.0 )
     {
         audio.pitch = 2.0;
     }
 
     // 最後に、値をホイールに適用します。加えられたトルクは現在のギアで除算され、
     // ユーザー入力変数を掛けます。
     FrontLeftWheel.motorTorque = EngineTorque / GearRatio[CurrentGear] * Input.GetAxis("Vertical");
     FrontRightWheel.motorTorque = EngineTorque / GearRatio[CurrentGear] * Input.GetAxis("Vertical");
         
     // 操舵角は、ユーザー入力を掛けた任意の値です。
     FrontLeftWheel.steerAngle = 10 * Input.GetAxis("Horizontal");
     FrontRightWheel.steerAngle = 10 * Input.GetAxis("Horizontal");
 }
 
void ShiftGears() {
     // この機能は車両のギアをシフトし、すべてのギアをループして、どれが
     // エンジンのRPMが目的の範囲内にあります。次に、ギアはこの「適切な」値に設定されます。
     if (EngineRPM >= MaxEngineRPM)
        {
            int AppropriateGear=CurrentGear;

            for(int i=0; i<6; i++)
            {
                if (wheelBL.rpm * GearRation[i] < MaxEngineRPM)
                {
                    AppropriateGear = i;
                    break;
                }
            }

            CurrentGear = AppropriateGear;

        }

        if (EngineRPM <= MinEngineRPM)
        {
            int AppropriateGear = CurrentGear;


            for(var j=5; j>=0; j--)
            {
                if (wheelBL.rpm * GearRation[j] > MinEngineRPM)
                {
                    AppropriateGear = j;
                    break;
                }
            }

            CurrentGear = AppropriateGear;
        }



    }

}
