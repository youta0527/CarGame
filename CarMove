using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Tobii.Gaming;
using UnityEngine.UI;


[System.Serializable]
public class AxleInfo
{
    public WheelCollider leftWheel;
    public WheelCollider rightWheel;
    public bool motor; //このホイールがエンジンにアタッチされているかどうか
    public bool steering; // このホイールがハンドルの角度を反映しているかどうか
}

public class CarMove : MonoBehaviour
{
    public List<AxleInfo> axleInfos; // 個々の車軸の情報
    public float maxMotorTorque; //ホイールに適用可能な最大トルク
    public float maxSteeringAngle; // 適用可能な最大ハンドル角度

    public WheelCollider wheelFL;
    public WheelCollider wheelFR;
    public WheelCollider wheelBL;
    public WheelCollider wheelBR;

    public Transform wheelFLTrans;
    public Transform wheelFRTrans;
    public Transform wheelBLTrans;
    public Transform wheelBRTrans;
    float steering = 0.0f;
    float motor = 0.0f;

    private GazeAware gazeAware;

    private float position;
    private float position2;

    public Text x_text;
    public Text Speed_text;

    void Start()
    {
       
        x_text.text = "x:" + position;
        Speed_text.text = motor + "km/h";
        gazeAware = GetComponent<GazeAware>();
    }
    void Update()
    {
        //wheelcolliderの回転速度に合わせてタイヤモデルを回転させる
        wheelFLTrans.Rotate(wheelFL.rpm / 60 * 360 * Time.deltaTime, 0, 0);
        wheelFRTrans.Rotate(wheelFR.rpm / 60 * 360 * Time.deltaTime, 0, 0);
        wheelBLTrans.Rotate(wheelBL.rpm / 60 * 360 * Time.deltaTime, 0, 0);
        wheelBRTrans.Rotate(wheelBR.rpm / 60 * 360 * Time.deltaTime, 0, 0);

        //wheelcolliderの角度に合わせてタイヤモデルを回転する（フロントのみ）
        wheelFLTrans.localEulerAngles = new Vector3(wheelFLTrans.localEulerAngles.x, wheelFL.steerAngle - wheelFLTrans.localEulerAngles.z, wheelFLTrans.localEulerAngles.z);
        wheelFRTrans.localEulerAngles = new Vector3(wheelFRTrans.localEulerAngles.x, wheelFR.steerAngle - wheelFRTrans.localEulerAngles.z, wheelFRTrans.localEulerAngles.z);

    }

    public void FixedUpdate()
    {
        GazePoint gazePoint = TobiiAPI.GetGazePoint();
        position =gazePoint.Screen.x;


        if (Input.GetButton("Jump"))//SPACEをおせばアクセル
        {
            motor = maxMotorTorque * Time.deltaTime;
            if (motor < 150) motor = 150;
        }
        else if(Input.GetKey(KeyCode.B))//"B"を押せばブレーキ
        {
            motor = -maxMotorTorque* Time.deltaTime * 2;
        }
        else//何も押していないとき
        {
            motor = -maxMotorTorque * Time.deltaTime;
            if (motor < 0) motor = 0;
        }
        if (position <= 600)
        {
            if (position <= 0) position2 = 1;
            else if (position < 100) position2 = (float)-0.8;
            else if (position < 200) position2 = (float)-0.6;
            else if (position < 300) position2 = (float)-0.4;
            else if (position < 400) position2 = (float)-0.2;
            else if (position < 500) position2 = (float)-0.05;
            else if (position < 600) position2 = 0;
            steering = maxSteeringAngle * position2;
        }
        else if (position >= 800)
        {
            if (position >= 1430) position2 = 1;
            else if (position >1350) position2 = (float)0.8;
            else if (position > 1250) position2 = (float)0.6;
            else if (position > 1150) position2 = (float)0.4;
            else if (position > 1050) position2 = (float)0.2;
            else if (position > 950) position2 = (float)0.05;
            else if (position > 800) position2 = 0;
            steering = maxSteeringAngle * position2;
        }



        foreach (AxleInfo axleInfo in axleInfos)
        {
            if (axleInfo.steering)
            {
                axleInfo.leftWheel.steerAngle = steering;
                axleInfo.rightWheel.steerAngle = steering;
            }
            if (axleInfo.motor)
            {
                axleInfo.leftWheel.motorTorque = motor;
                axleInfo.rightWheel.motorTorque = motor;
            }
        }

        x_text.text = "x:" + position;  //目線座標の表示
        Speed_text.text = motor + "km/h";　//スピードの表示
    }
    void UpdateMeshesPosition()
    {
        Quaternion quat;
        Vector3 pos;
        wheelFL.GetWorldPose(out pos, out quat);
        wheelFR.GetWorldPose(out pos, out quat);
        wheelBL.GetWorldPose(out pos, out quat);
        wheelBR.GetWorldPose(out pos, out quat);

        wheelFLTrans.position = pos;
        wheelFRTrans.position = pos;
        wheelBLTrans.position = pos;
        wheelBRTrans.position = pos;

        wheelFLTrans.rotation = quat;
        wheelFRTrans.rotation = quat;
        wheelBLTrans.rotation = quat;
        wheelBRTrans.rotation = quat;


    }
}


